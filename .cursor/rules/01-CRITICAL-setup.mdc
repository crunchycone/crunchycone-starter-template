---
description: CRITICAL Project setup automation rules - MUST RUN IN ORDER
alwaysApply: true
priority: 1
---

# üî¥ CRITICAL: PROJECT SETUP RULES

## ‚ö†Ô∏è THIS FILE CONTAINS CRITICAL SETUP STEPS IN PRIORITY ORDER ‚ö†Ô∏è

## üö® PRIORITY ORDER - MUST FOLLOW THIS SEQUENCE:

### 1Ô∏è‚É£ DEPENDENCIES (ABSOLUTE FIRST PRIORITY)

#### When `node_modules` doesn't exist:
**‚ùå NOTHING WILL WORK WITHOUT THIS - MUST DO FIRST**

- Show message: "üö® CRITICAL: Dependencies not installed. NOTHING will work without this!"
- Show message: "Installing dependencies now..."
- **RUN IMMEDIATELY**: `npm install`
- Show message: "‚úÖ Dependencies installed - proceeding to database setup"

**FAILURE TO RUN THIS FIRST WILL CAUSE:**
- ‚ùå Cannot run ANY npm scripts
- ‚ùå Cannot setup database
- ‚ùå Cannot generate Prisma client
- ‚ùå Cannot start development server
- ‚ùå All commands will fail with "command not found"

#### Secondary Check - When `package-lock.json` doesn't exist but `node_modules` exists:
- Show message: "üì¶ Package lock file missing. Regenerating lock file..."
- **RUN**: `npm install`
- Show message: "‚úÖ Dependencies installed and lock file created"

### 2Ô∏è‚É£ DATABASE SETUP (SECOND PRIORITY)

#### When `prisma/db/prod.db` doesn't exist:
**‚ùå APPLICATION WILL BE COMPLETELY BROKEN WITHOUT THIS**

- Show message: "üö® CRITICAL: Database file does not exist. Application WILL NOT WORK!"
- Show message: "Setting up database with migrations and seed data..."
- **RUN IMMEDIATELY**: `npm run db:reset --yes`
- Show message: "‚úÖ Database setup complete! Default roles (user, admin) have been created."

**FAILURE TO RUN THIS SECOND WILL CAUSE:**
- ‚ùå Cannot start the application
- ‚ùå All pages return errors
- ‚ùå Cannot sign in or sign up
- ‚ùå TypeScript compilation fails
- ‚ùå Prisma client errors

### 3Ô∏è‚É£ ENVIRONMENT SETUP (THIRD PRIORITY)

#### When `.env` file doesn't exist:
- Show message: "üîê Environment variables not configured. Creating .env file..."
- **RUN**: `cp .env.example .env`
- Show message: "üîê Generating secure JWT_SECRET..."
- **RUN**: `node -e "const crypto = require('crypto'); const fs = require('fs'); const envFile = fs.readFileSync('.env', 'utf8'); const newEnv = envFile.replace('JWT_SECRET=\"your-secret-key-change-in-production\"', 'JWT_SECRET=\"' + crypto.randomBytes(32).toString('hex') + '\"'); fs.writeFileSync('.env', newEnv);"`
- Show message: "‚úÖ Generated secure JWT_SECRET in .env file"

### 4Ô∏è‚É£ PRISMA CLIENT GENERATION (FOURTH PRIORITY)

#### When `node_modules/.prisma/client/index.js` doesn't exist:
- Show message: "‚ö†Ô∏è Prisma client not generated. Generating now..."
- **RUN**: `npx prisma generate`
- Show message: "‚úÖ Prisma client generated"

## ‚úÖ VERIFY COMPLETE SETUP

### All of these MUST exist IN THIS ORDER for the app to work:
1. ‚úÖ `node_modules` - **FIRST: Dependencies installed**
2. ‚úÖ `prisma/db/prod.db` - **SECOND: Database exists**
3. ‚úÖ `.env` - **THIRD: Environment configured**
4. ‚úÖ `node_modules/.prisma/client/index.js` - **FOURTH: Prisma client ready**

When all exist, show:
```
‚úÖ ‚úÖ ‚úÖ PROJECT SETUP COMPLETE ‚úÖ ‚úÖ ‚úÖ
You can now run 'npm run dev' to start the development server.
```

## üîç ERROR DETECTION PATTERNS

### Detect and fix these errors IN ORDER:

```
Error: "command not found" or "Cannot find module" (any npm package)
‚Üí PRIORITY 1 ISSUE: Dependencies not installed
‚Üí FIX: npm install

Error: "Database file not found" or "SQLITE_CANTOPEN"
‚Üí PRIORITY 2 ISSUE: Database doesn't exist
‚Üí FIX: npm run db:reset --yes

Error: "JWT_SECRET is not defined"
‚Üí PRIORITY 3 ISSUE: Environment not configured
‚Üí FIX: cp .env.example .env && generate JWT secret

Error: "Cannot find module '.prisma/client'"
‚Üí PRIORITY 4 ISSUE: Prisma client not generated
‚Üí FIX: npx prisma generate
```

## üìã SETUP CHECKLIST (MUST RUN IN THIS EXACT ORDER)

### The ONLY correct sequence:

1. **Install Dependencies (FIRST - NOTHING works without this)**
   ```bash
   npm install
   ```

2. **Setup Database (SECOND - App won't start without this)**
   ```bash
   npm run db:reset --yes
   ```

3. **Setup Environment (THIRD)**
   ```bash
   cp .env.example .env
   # Then generate JWT secret
   ```

4. **Start Development (LAST)**
   ```bash
   npm run dev
   ```

## ‚ö†Ô∏è COMMON MISTAKES TO AVOID

1. **‚ùå DON'T** try to run database setup before installing dependencies
   - **‚úÖ DO** always run `npm install` FIRST

2. **‚ùå DON'T** try to start the app without the database
   - **‚úÖ DO** always run `npm run db:reset --yes` SECOND

3. **‚ùå DON'T** run commands out of order
   - **‚úÖ DO** follow the exact sequence: dependencies ‚Üí database ‚Üí environment ‚Üí dev

4. **‚ùå DON'T** run `prisma generate` alone after schema changes
   - **‚úÖ DO** run `prisma migrate dev` instead (it includes generate)

5. **‚ùå DON'T** skip steps thinking they're optional
   - **‚úÖ DO** complete ALL steps in order

## üÜò EMERGENCY RECOVERY

If everything is broken, run IN THIS EXACT ORDER:
```bash
# Nuclear option - complete reset IN ORDER
1. rm -rf node_modules prisma/db/prod.db .env
2. npm install              # FIRST PRIORITY
3. npm run db:reset --yes   # SECOND PRIORITY  
4. cp .env.example .env     # THIRD PRIORITY
5. npm run dev              # LAST
```

---
‚ö†Ô∏è **REMEMBER THE PRIORITY ORDER**:
1Ô∏è‚É£ **FIRST**: Dependencies (`npm install`) - Without this, NOTHING works
2Ô∏è‚É£ **SECOND**: Database (`npm run db:reset --yes`) - Without this, app won't start
3Ô∏è‚É£ **THIRD**: Environment (`.env`) - For configuration
4Ô∏è‚É£ **LAST**: Start dev server