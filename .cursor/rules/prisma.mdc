---
description: Prisma schema change handling rules
globs: ["prisma/schema.prisma", "prisma/**/*.ts"]
---

# Prisma Development Guidelines

## Schema Change Workflow

When `prisma/schema.prisma` is modified:

### For STRUCTURAL Changes (models/fields/relations):
1. Show message: "üîÑ Prisma schema modified! Follow the correct development flow:"
2. Show message: "üìã For STRUCTURAL changes (models/fields/relations): Create migration first"
3. Provide command: `npx prisma migrate dev --name 'describe-your-changes'`
   - This command creates migration AND generates client automatically

### For NON-STRUCTURAL Changes (comments/formatting):
1. Show message: "üìã For NON-STRUCTURAL changes (comments/formatting): Generate only"
2. Provide command: `npx prisma generate`

### Important Warning:
‚ö†Ô∏è Migrations are NOT automatic to prevent data loss. Always review migration files before applying.

## Migration Best Practices

### Naming Conventions:
- `add-model-name` - For new models
- `update-model-field` - For field changes
- `remove-unused-table` - For deletions
- `add-indexes` - For performance improvements

### Development Flow:
1. **Modify schema** - Make changes to `schema.prisma`
2. **Create migration** - `npx prisma migrate dev --name "descriptive-name"`
3. **Review migration** - Check generated SQL in `prisma/migrations`
4. **Test locally** - Ensure migration works as expected
5. **Commit both** - Schema and migration files together

### Common Commands:
- `npm run db:reset` - Reset database (removes data!)
- `npm run db:push` - Push schema without migration (dev only)
- `npm run db:seed` - Seed database with initial data
- `npm run db:studio` - Open Prisma Studio GUI

### Schema Conventions:
- All models include: `id` (ULID string), `created_at`, `updated_at`, `deleted_at`
- IDs are ULID strings with `@default("")` - middleware generates actual values
- Import Prisma client from `@/lib/prisma`, NOT `@prisma/client` directly
- Use soft deletes (set `deleted_at`) instead of hard deletes
- Add indexes for frequently queried fields
- Use `@@unique` for compound unique constraints
- Use `@relation` for explicit relation names

### ULID Implementation:
- All models use `id String @id @default("")`
- ULID generation handled by Prisma middleware in `lib/utils/ulid.ts`
- IDs are 26-character strings, sortable by creation time
- Example: `01JZK5AT1CBD1SBW5T3JQ60VPR`