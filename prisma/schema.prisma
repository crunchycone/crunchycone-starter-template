// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default("")
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  deleted_at     DateTime?
  
  email          String    @unique
  name           String?   // Added for Auth.js compatibility
  image          String?   // Added for Auth.js compatibility
  emailVerified  DateTime? // Added for Auth.js compatibility
  password       String?
  last_signed_in DateTime?
  
  profile        UserProfile?
  roles          UserRole[]
  
  // Auth.js relationships
  accounts       Account[]
  sessions       Session[]
  
  @@index([email])
  @@index([deleted_at])
}

model UserProfile {
  id         String    @id @default("")
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
  
  user_id    String    @unique
  first_name String?
  last_name  String?
  
  user       User      @relation(fields: [user_id], references: [id])
  
  @@index([user_id])
  @@index([deleted_at])
}

model Role {
  id         String    @id @default("")
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
  
  name       String    @unique
  
  users      UserRole[]
  
  @@index([name])
  @@index([deleted_at])
}

model UserRole {
  id         String    @id @default("")
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
  
  user_id    String
  role_id    String
  
  user       User      @relation(fields: [user_id], references: [id])
  role       Role      @relation(fields: [role_id], references: [id])
  
  @@unique([user_id, role_id])
  @@index([user_id])
  @@index([role_id])
  @@index([deleted_at])
}

// ============================================
// Auth.js Required Models
// ============================================

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default("")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}